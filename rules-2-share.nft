# Translated by iptables-restore-translate v1.6.1 on Sat Aug 24 19:48:26 2019
# Defines
define myip4 = 
define ssh = 
define httpd = 
define squid = 
define webmin = 

# Includes
include /path/to/file.nft

add table ip mangle
add chain ip mangle PREROUTING { type filter hook prerouting priority 0; policy accept; }
add chain ip mangle INPUT { type filter hook input priority 0; policy accept; }
add chain ip mangle FORWARD { type filter hook forward priority 0; policy accept; }
add chain ip mangle OUTPUT { type filter hook output priority 0; policy accept; }
add chain ip mangle POSTROUTING { type filter hook postrouting priority 0; policy accept; }
####----> ???add rule ip mangle PREROUTING tcp conntrack ct state new tcpmss mss 536:65535 counter drop??? <----####
add rule ip mangle PREROUTING iifname != lo ip saddr 127.0.0.0/8 counter drop
add rule ip mangle PREROUTING ip saddr 224.0.0.0/3 counter drop
add rule ip mangle PREROUTING ip saddr 169.254.0.0/16 counter drop
add rule ip mangle PREROUTING ip saddr 172.16.0.0/12 counter drop
add rule ip mangle PREROUTING ip saddr 192.0.2.0/24 counter drop
add rule ip mangle PREROUTING ip saddr 192.168.0.0/16 counter drop
add rule ip mangle PREROUTING ip saddr 10.0.0.0/8 counter drop
add rule ip mangle PREROUTING counter drop
add rule ip mangle PREROUTING ip saddr 240.0.0.0/5 counter drop
add rule ip mangle PREROUTING ip protocol icmp counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|ack) != syn ct state new counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|ack|urg counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|psh|urg counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|psh|ack|urg) == fin|psh|urg counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop
add rule ip mangle PREROUTING tcp flags & (fin|syn) == fin|syn counter drop
add rule ip mangle PREROUTING tcp flags & (syn|rst) == syn|rst counter drop
add rule ip mangle PREROUTING tcp flags & (fin|rst) == fin|rst counter drop
add rule ip mangle PREROUTING tcp flags & (fin|ack) == fin counter drop
add rule ip mangle PREROUTING tcp flags & (ack|urg) == urg counter drop
add rule ip mangle PREROUTING tcp flags & (fin|ack) == fin counter drop
add rule ip mangle PREROUTING tcp flags & (psh|ack) == psh counter drop
add rule ip mangle PREROUTING ct state invalid counter drop
add rule ip mangle PREROUTING ip frag-off != 0 counter drop
add table ip raw
add chain ip raw PREROUTING { type filter hook prerouting priority 0; policy accept; }
add chain ip raw OUTPUT { type filter hook output priority 0; policy accept; }
####----> ???? add rule ip raw PREROUTING tcp syn notrack ???? <----#### 
add table ip filter
add chain ip filter INPUT { type filter hook input priority 0; policy drop; }
add chain ip filter FORWARD { type filter hook forward priority 0; policy drop; }
add chain ip filter OUTPUT { type filter hook output priority 0; policy accept; }
add chain ip filter ICMPFLOOD
add chain ip filter LOGGING
add chain ip filter SSHBRUTE
add chain ip filter port-scanning
add rule ip filter INPUT counter jump LOGGING
add rule ip filter INPUT ip saddr $myipv4 counter accept
add rule ip filter INPUT iifname lo counter accept
add rule ip filter INPUT iifname lo ip saddr 127.0.0.1 counter accept
add rule ip filter INPUT iifname != lo ip saddr 127.0.0.0/8 counter drop
add rule ip filter INPUT iifname enp0s31f6 ip saddr $g4dns ip daddr $myipv4 udp dport 53 counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $g4dns ip daddr $myipv4 tcp dport 53 counter accept
add rule ip filter INPUT ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip daddr $myipv4 ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip daddr $myipv4  tcp dport { 80,443} ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip daddr $myipv4  udp dport { 80,443} ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 tcp dport $httpd ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 udp dport $httd ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip daddr $myipv4 tcp dport $squid ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip daddr $myipv4 udp dport $squid ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4  tcp dport { 139,445} ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4  udp dport { 137,138} ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 tcp dport $ssh ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 udp dport $ssh ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 tcp dport $webmin ct state related,established counter accept
add rule ip filter INPUT iifname enp0s31f6 ip saddr $mynetv4 ip daddr $myipv4 udp dport $webmin ct state related,established counter accept
add rule ip filter INPUT tcp flags & (rst) == rst limit rate 2/second burst 2 packets counter accept
add rule ip filter INPUT ct state new  tcp flags & (fin|syn|rst|ack) != syn counter drop
####----> add rule ip filter INPUT -m addrtype --dst-type BROADCAST -j DROP <----####
####----> add rule ip filter INPUT -m addrtype --dst-type MULTICAST -j DROP <----####
####----> add rule ip filter INPUT -m addrtype --dst-type ANYCAST -j DROP   <----####
add rule ip filter INPUT tcp flags & (rst) == rst counter drop
add rule ip filter INPUT ct state new tcp dport 113 tcp flags & (fin|syn|rst|ack) == syn counter reject with tcp reset
add rule ip filter INPUT ct state new icmp type echo-request counter jump LOGGING
add rule ip filter INPUT icmp type address-mask-request counter reject
add rule ip filter INPUT icmp type timestamp-request counter reject
add rule ip filter INPUT limit rate 1/second burst 100 packets counter jump LOGGING
####----> add rule ip filter INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460 <----####
add rule ip filter INPUT ct state invalid  counter drop
add rule ip filter INPUT ip protocol tcp ct state new counter drop
add rule ip filter FORWARD counter drop
add rule ip filter OUTPUT oifname lo counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 tcp sport $squid ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 udp sport $squid ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 tcp dport $https ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 udp dport $httpd ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ip daddr $mynetv4  tcp dport { 139,445} ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ip daddr $mynetv4  udp dport { 137,138} ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ip daddr $mynetv4 tcp dport $ssh ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ip daddr $mynetv4 udp dport $ssh ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ip daddr $mynetv4 tcp dport $webmin ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6 ip saddr $myipv4 ip daddr $mynetv4 udp dport $webmin ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6  tcp dport { 80,443} ct state related,established counter accept
add rule ip filter OUTPUT oifname enp0s31f6  udp dport { 80,443} ct state related,established counter accept
add rule ip filter OUTPUT ct state invalid  counter drop
####----> add rule ip filter ICMPFLOOD -m recent --set --name ICMP --mask 255.255.255.255 --rsource <----####
####----> add rule ip filter ICMPFLOOD -m recent --update --seconds 1 --hitcount 6 --rttl --name ICMP --mask 255.255.255.255 --rsource -m limit --limit 1/sec --limit-burst 1 -j LOGGING <----####
####----> add rule ip filter ICMPFLOOD -m recent --update --seconds 1 --hitcount 6 --rttl --name ICMP --mask 255.255.255.255 --rsource -j DROP <----####
add rule ip filter ICMPFLOOD counter drop
add rule ip filter LOGGING limit rate 2/minute burst 5 packets counter log prefix "IPTables-Dropped: "
####----> add rule ip filter SSHBRUTE -m recent --set --name SSH --mask 255.255.255.255 --rsource <----####
####----> add rule ip filter SSHBRUTE -m recent --update --seconds 300 --hitcount 10 --name SSH --mask 255.255.255.255 --rsource -m limit --limit 1/sec --limit-burst 100 -j LOGGING <----####
####----> add rule ip filter SSHBRUTE -m recent --update --seconds 300 --hitcount 10 --name SSH --mask 255.255.255.255 --rsource -j DROP <----####
add rule ip filter SSHBRUTE counter drop
add rule ip filter port-scanning tcp flags & (fin|syn|rst|ack) == rst limit rate 1/second burst 2 packets counter return
add rule ip filter port-scanning counter drop
# Completed on Sat Aug 24 19:48:26 2019
